[General]
network = inet.networks.tsn.TsnLinearNetwork
description = "Traffic shaping using cqf shapers"

record-eventlog = true
*.client.**.module-eventlog-recording = true
*.switch.**.module-eventlog-recording = true
*.server.**.module-eventlog-recording = true
**.module-eventlog-recording = false

**.displayGateSchedules = true
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

# client applications
*.client.numApps = 2
*.client.app[*].typename = "UdpSourceApp" 
*.client.app[0].display-name = "best effort"
*.client.app[1].display-name = "video"
*.client.app[*].io.destAddress = "server"
*.client.app[0].io.destPort = 1000
*.client.app[1].io.destPort = 1001
*.client.app[*].source.packetLength = 1000B - 54B # 42B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.client.app[0].source.productionInterval = exponential(200us) # ~40Mbps
*.client.app[1].source.productionInterval = exponential(400us) # ~20Mbps

# server applications
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].io.localPort = 1000
*.server.app[1].io.localPort = 1001

# enable outgoing streams
*.client.hasOutgoingStreams = true

# client stream identification
*.client.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "time sensitive", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.client.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0},
                                                 {stream: "time sensitive", pcp: 3}]

# enable egress traffic shaping
*.switch.hasEgressTrafficShaping = true

# enable egress CyclicQueuingForwarding
*.switch.hasCyclicQueuingForwarding = true

# time-aware traffic shaping
*.switch.eth[*].macLayer.queue.numTrafficClasses = 8
*.switch.eth[*].macLayer.queue.*[6].display-name = "cqf#0"
*.switch.eth[*].macLayer.queue.*[7].display-name = "cqf#1"
*.switch.eth[*].macLayer.queue.classifier.cqfqueues = [7, 6]
*.switch.eth[*].macLayer.queue.classifier.interval = 5ms

*.switch.eth[*].macLayer.queue.transmissionGate[6].offset = 0ms
*.switch.eth[*].macLayer.queue.transmissionGate[6].durations = [5ms, 5ms] # period is 10 # length of periods
*.switch.eth[*].macLayer.queue.transmissionGate[7].offset = 5ms
*.switch.eth[*].macLayer.queue.transmissionGate[7].durations = [5ms, 5ms]
